(|SYSTEM|::|VERSION| '(20080430.))
#0Y_ #0Y |CHARSET|::|UTF-8|
#Y(#:|1 26 (IN-PACKAGE :CL-USER)-1|
   #17Y(00 00 00 00 00 00 00 00 20 01 DA 31 F6 0F 01 19 01)
   ("CL-USER" |COMMON-LISP|::|*PACKAGE*|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|28 37 (DEFPACKAGE SLIME-NREGEX (:USE #:COMMON-LISP) ...)-2-1|
   #18Y(00 00 00 00 00 00 00 00 20 01 DA 01 04 31 F0 3E 19 01) ("SLIME-NREGEX")
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|28 37 (DEFPACKAGE SLIME-NREGEX (:USE #:COMMON-LISP) ...)-2-2|
   #17Y(00 00 00 00 00 00 00 00 20 01 DA DB 31 EC 3E 19 01)
   (("COMMON-LISP") "SLIME-NREGEX")
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|28 37 (DEFPACKAGE SLIME-NREGEX (:USE #:COMMON-LISP) ...)-2-3|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB 63 2D 03 02 3E 19 01)
   (("REGEX" "REGEX-COMPILE") "SLIME-NREGEX" |SYSTEM|::|INTERN-EXPORT|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|28 37 (DEFPACKAGE SLIME-NREGEX (:USE #:COMMON-LISP) ...)-2-4|
   #15Y(00 00 00 00 00 00 00 00 20 01 DA 31 D9 19 01) ("SLIME-NREGEX")
   (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
#Y(#:|39 40 (IN-PACKAGE :SLIME-NREGEX)-3|
   #17Y(00 00 00 00 00 00 00 00 20 01 DA 31 F6 0F 01 19 01)
   ("SLIME-NREGEX" |COMMON-LISP|::|*PACKAGE*|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|42 46 (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (DEFVAR *REGEX-DEBUG* NIL))-4|
   #24Y(00 00 00 00 00 00 00 00 20 01 DA 31 62 DB 8C 57 04 DB 63 31 5A C6 19
        01)
   ((|COMMON-LISP|::|SPECIAL| |SLIME-NREGEX|::|*REGEX-DEBUG*|)
    |SLIME-NREGEX|::|*REGEX-DEBUG*|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|48 50 (DEFMACRO INFO (MESSAGE &REST ARGS) ...)-5|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|SLIME-NREGEX|::|INFO| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SLIME-NREGEX|::|INFO|
       #45Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 64 2D 04 01 1D 13 9F 5C 78
            A0 5C 79 0E 03 1F 0E DE DF AF A0 5D 5D 5D 19 05 AE 2F 02 19 03 19
            05)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR|
        |SLIME-NREGEX|::|*REGEX-DEBUG*| |COMMON-LISP|::|FORMAT|
        |COMMON-LISP|::|*STANDARD-OUTPUT*|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|) |COMMON-LISP|::|NIL| 1)
    (|SLIME-NREGEX|::|MESSAGE| |COMMON-LISP|::|&REST| |SLIME-NREGEX|::|ARGS|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|52 55 (DEFVAR *REGEX-GROUPS* (MAKE-ARRAY 10))-6|
   #28Y(00 00 00 00 00 00 00 00 20 01 DA 31 62 DB 8C 57 08 DB DC 38 07 71 1D 31
        5A C6 19 01)
   ((|COMMON-LISP|::|SPECIAL| |SLIME-NREGEX|::|*REGEX-GROUPS*|)
    |SLIME-NREGEX|::|*REGEX-GROUPS*| 10.)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|56 56 (DEFVAR *REGEX-GROUPINGS* 0)-7|
   #24Y(00 00 00 00 00 00 00 00 20 01 DA 31 62 DB 8C 57 04 DB DC 31 5A C6 19
        01)
   ((|COMMON-LISP|::|SPECIAL| |SLIME-NREGEX|::|*REGEX-GROUPINGS*|)
    |SLIME-NREGEX|::|*REGEX-GROUPINGS*| 0.)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|58 83 (DEFUN REGEX (EXPRESSION STRING) ...)-8|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|SLIME-NREGEX|::|REGEX| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SLIME-NREGEX|::|REGEX|
       #100Y(00 00 00 00 02 00 00 00 26 03 AE 8E 19 21 AE 8E 1D 22 00 14 63 AD
             8E 2F 1E DB AE 7B 02 31 63 14 B0 36 01 1D 15 6B 02 8E AC 13 DD 6B
             02 1B 28 AE 2F 00 1B 5F 9F 1B 5C 9E 1B 65 00 19 05 02 19 05 DE B2
             6B 05 B0 33 01 01 78 6B 05 B1 33 01 01 5C 78 76 03 84 02 85 01 AD
             AD 91 01 34 63 16 02 AC 32 63 19 05)
       (|SLIME-NREGEX|::|REGEX-COMPILE| |COMMON-LISP|::|FUNCTION|
        |SLIME-NREGEX|::|*REGEX-GROUPINGS*| 0. |COMMON-LISP|::|SUBSEQ|
        |SLIME-NREGEX|::|*REGEX-GROUPS*|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SLIME-NREGEX|::|EXPRESSION| |COMMON-LISP|::|STRING|)
       "Usage: (regex <expression> <string)\n
   This function will call regex-compile on the expression and then apply\n
   the string to the returned lambda list."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|85 88 (DEFVAR *REGEX-SPECIAL-CHARS* "?*+.()[]\\\\${}")-9|
   #24Y(00 00 00 00 00 00 00 00 20 01 DA 31 62 DB 8C 57 04 DB DC 31 5A C6 19
        01)
   ((|COMMON-LISP|::|SPECIAL| |SLIME-NREGEX|::|*REGEX-SPECIAL-CHARS*|)
    |SLIME-NREGEX|::|*REGEX-SPECIAL-CHARS*| "?*+.()[]\\${}")
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|90 92 (DEFMACRO ADD-EXP (LIST) ...)-10|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|SLIME-NREGEX|::|ADD-EXP| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SLIME-NREGEX|::|ADD-EXP|
       #38Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 63 2D 04 01 1D 0E 9F 5C 78
            DD DE DF DE B0 7B 03 61 03 19 04 AE 2F 02 19 03)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR|
        |COMMON-LISP|::|SETF| |SLIME-NREGEX|::|EXPRESSION|
        |COMMON-LISP|::|APPEND|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Add an item to the end of expression" 1)
    (|COMMON-LISP|::|LIST|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|94 166 (DEFUN REGEX-QUOTED (CHAR-STRING &OPTIONAL #) ...)-11|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|SLIME-NREGEX|::|REGEX-QUOTED| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SLIME-NREGEX|::|REGEX-QUOTED|
       #309Y(00 00 00 00 01 00 01 00 26 08 3D 01 AE DA 71 31 AF DA 71 31 DB AE
             24 02 80 58 AE 24 04 80 57 AE 24 06 80 56 AE 24 08 80 55 AE 24 0A
             80 54 AE 24 0C 80 53 AE 24 0E 80 52 AE 24 10 80 51 AE 24 12 80 50
             AE 24 14 80 4F AE 24 16 80 4F AE 71 28 F2 91 01 34 09 AE 71 28 F3
             90 01 33 80 6D 9F F9 AD 8F 34 09 93 04 06 AD 65 26 64 31 0E AD AD
             40 02 19 06 C8 F9 1B 69 CA F9 1B 65 CC F9 1B 61 CE F9 1B 5D D0 F9
             1B 59 D2 F9 1B 55 D4 F9 1B 51 D6 F9 1B 4D D8 F9 1B 49 03 15 F9 1B
             44 03 17 F9 1B FF BE DA DA 1B 15 F5 AD 73 02 39 B4 AF 71 31 71 28
             F2 73 01 38 82 02 37 00 85 01 AD F4 91 01 2F 65 15 16 01 F9 03 1C
             F8 1B FF 95 B1 72 62 F4 91 01 32 2D B1 DB 71 31 71 28 F2 91 01 34
             22 B1 DB 71 31 71 28 F3 91 01 33 17 B1 F4 71 31 71 28 F2 91 01 34
             0C B1 F4 71 31 71 28 F3 90 01 33 FF A2 AE 71 28 F2 73 01 38 F7 65
             1E 65 1F 65 20 65 21 65 22 65 23 B3 7B 03 7B 02 65 24 65 22 65 23
             B4 7B 03 7B 02 7B 04 7B 02 7B 01 03 25 5D 7A 61 01 FA 16 01 1B FF
             2A)
       (0. 1. #\n #\Newline #\c #\Return #\t #\Tab #\d
        #*0000000000000000000000000000000000000000000000001111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        #\D
        #*1111111111111111111111111111111111111111111111110000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        #\w
        #*0000000000000000000000000000000000000000000000001111111111000000011111111111111111111111111000010111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        #\W
        #*1111111111111111111111111111111111111111111111110000000000111111100000000000000000000000000111101000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        #\b
        #*0000000001000000000000000000000011000000000010100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        #\B
        #*1111111110111111111111111111111100111111111101011111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        #\s
        #*0000000001100000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        #\S
        #*1111111110011111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        48. 57. 2. 8. 3. |COMMON-LISP|::|LET| |SLIME-NREGEX|::|NSTRING|
        |COMMON-LISP|::|SUBSEQ| |COMMON-LISP|::|STRING| |COMMON-LISP|::|CAR|
        |COMMON-LISP|::|AREF| |SLIME-NREGEX|::|*REGEX-GROUPS*|
        |COMMON-LISP|::|CADR|
        ((|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|<| |COMMON-LISP|::|LENGTH|
           (|COMMON-LISP|::|+| |SLIME-NREGEX|::|INDEX|
            (|COMMON-LISP|::|LENGTH| |SLIME-NREGEX|::|NSTRING|)))
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|))
         (|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|NOT|
           (|COMMON-LISP|::|STRING=| |COMMON-LISP|::|STRING|
            |SLIME-NREGEX|::|NSTRING| :|START1| |SLIME-NREGEX|::|INDEX| :|END1|
            (|COMMON-LISP|::|+| |SLIME-NREGEX|::|INDEX|
             (|COMMON-LISP|::|LENGTH| |SLIME-NREGEX|::|NSTRING|))))
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|)
          (|COMMON-LISP|::|INCF| |SLIME-NREGEX|::|INDEX|
           (|COMMON-LISP|::|LENGTH| |SLIME-NREGEX|::|NSTRING|))))
        #*1111111110011111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SLIME-NREGEX|::|CHAR-STRING| |COMMON-LISP|::|&OPTIONAL|
        (|SLIME-NREGEX|::|INVERT| |COMMON-LISP|::|NIL|))
       "Usage: (regex-quoted <char-string> &optional invert)\n
       Returns either the quoted character or a simple bit vector of bits set for\n
       the matching values"
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|168 521 (DEFUN REGEX-COMPILE (SOURCE &KEY #) ...)-12|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|SLIME-NREGEX|::|REGEX-COMPILE| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SLIME-NREGEX|::|REGEX-COMPILE|
       #1099Y(00 00 00 00 01 00 00 00 A6 1C 01 00 00 00 3D 01 63 DB 01 03 B3 72
              62 8E AC 80 67 B3 DD 71 31 25 04 09 B3 DB 38 01 81 60 07 7E 06 B3
              72 62 DF 91 01 34 0A B3 E0 DD DF 38 02 8C 35 80 48 92 06 38 B3 DD
              71 31 6B 07 38 06 8E 7A 2D B3 72 62 DB 91 01 32 0B B3 DB 71 31 6B
              07 38 06 8E 7A 1A E2 E3 E4 E5 E2 E6 E7 BA DD 71 31 7B 03 D3 5D 7A
              7B 03 7B 02 D4 5D 7A 61 01 F8 B0 EA 82 02 23 04 DD 1B 82 AA C7 19
              08 7E 06 93 06 FF B5 1B 6B B4 AD 71 31 9D 26 11 81 BE B2 D7 1B 3C
              B2 D8 1B 38 AD B6 72 62 72 B2 90 01 2F 72 B2 D9 1B 2A B2 03 15 1B
              25 B2 03 16 1B 20 B2 03 17 1B 1B 85 05 14 84 04 B2 F2 F3 F4 97 09
              7B 03 03 1B 5D 7A 7B 01 82 02 23 06 14 B2 61 01 14 82 02 23 06 1B
              82 4A 94 04 83 05 B3 F2 F6 F3 F4 97 05 7B 03 7B 02 03 1D 5D 7A 7B
              01 82 02 23 07 14 AD 73 00 38 7B 01 82 02 23 07 16 01 1B 82 21 C6
              1B 16 C8 1B 1A B5 96 02 71 31 C9 5A 14 65 1E 38 07 03 1F FD 92 08
              68 C8 FC 71 1D 92 01 64 C6 14 93 02 02 85 04 96 04 1B 80 AB 65 22
              BA AE 71 31 BB DF B0 73 02 37 71 31 33 02 1E B9 AD 71 31 71 28 BA
              DF AF 73 02 37 71 31 71 28 90 01 34 5B B9 AD 71 31 71 28 1B 08 AF
              AD B0 33 01 02 85 00 AC BB DF B0 73 02 37 71 31 71 28 91 01 32 69
              DF AE 82 02 37 01 16 01 1B 80 5A AF BB AF 71 31 71 28 B0 33 01 02
              16 01 1B 80 4A B9 96 01 71 31 25 21 0C B9 DF AE 73 02 37 71 31 25
              20 FF 9E B9 AD 71 31 24 20 2F B9 AD 71 31 BA AE 71 31 25 23 18 63
              BB AF 38 01 72 60 B2 30 24 42 02 6A 01 6A 01 AE AD 82 02 37 02 16
              01 AC 8F 34 FF AD AF AD 64 31 0D 16 01 85 00 B9 AD 71 31 25 20 FF
              AC 9D FD 16 01 B5 65 25 65 26 B0 7B 02 7B 01 03 27 5D 7A 7B 01 82
              02 23 09 16 03 1B 81 26 B4 9E 1B 80 43 B4 E2 E3 65 28 65 29 E6 65
              2A B3 7B 03 7B 03 7B 02 03 2B 1B 2A 01 02 B7 96 04 38 01 72 60 63
              30 24 42 02 6A 02 6A 00 14 8E 1D 50 AC 8E 2E 51 AC 8F 34 15 B4 65
              25 65 26 AF 7B 02 7B 01 03 2C 5D 7A 61 01 14 82 02 23 08 AF 9F 1B
              80 CD 65 2D DD B7 72 62 B0 73 01 38 1B 80 4E 15 16 02 1B 80 51 B4
              E2 E3 65 28 65 2F E6 65 30 B5 7B 03 7B 03 7B 02 03 31 5D 7A 61 01
              1B 80 95 03 42 1B 81 01 AC 7B 01 B0 82 02 23 03 1B 81 55 B8 B1 AF
              73 02 37 71 31 AC 6B 07 38 06 8E 7A 40 65 2E B0 AE 71 51 82 02 26
              03 16 01 85 01 AD AD 91 01 34 5C 00 16 02 14 AD 72 62 DB 90 01 2F
              FF A5 AC 24 32 08 AC 24 33 04 AC 25 34 0A AD DD AF 72 62 72 B2 81
              60 01 B4 E2 65 35 65 36 65 37 65 38 B3 72 62 7B 03 7B 03 03 39 5D
              7A E2 E3 65 3A 65 2E B3 65 3B 65 38 65 3C 65 37 65 38 B9 72 62 7B
              03 7B 07 7B 02 65 3D 65 3E 65 38 B4 72 62 7B 03 7B 04 61 02 14 82
              02 23 08 AF AE 72 62 32 B2 14 82 02 37 03 16 02 16 01 85 00 AC B5
              72 62 91 01 2F FD 58 16 01 B0 65 3F 82 02 23 04 14 65 40 82 02 23
              04 63 80 AE 01 B0 81 63 04 DD AC B2 72 62 90 01 34 80 B3 AC B2 71
              A1 AC 25 41 15 96 01 B3 71 A1 8F 1D FF 19 96 01 B3 71 A1 7B 01 B0
              82 02 23 03 AC 8E 1D FF 0D AC 25 43 27 96 01 B3 71 A1 8E 1D 06 03
              48 14 33 00 1E 65 44 65 45 65 46 96 04 B6 71 A1 7B 03 03 47 5D 7A
              7B 01 B0 33 02 23 1B 3F AC 24 49 04 AC 25 41 3A 96 01 B3 71 A1 8F
              1D 32 65 25 65 4A 65 45 65 46 65 4B 63 65 4C 96 08 BA 71 A1 7B 04
              7B 03 65 4B 65 4D 65 4E 65 25 65 4F 65 45 65 46 AA 5D 7A 7B 03 7B
              04 7B 04 61 01 FB 85 01 16 01 85 00 1B FF 61 65 50 65 51 F2 65 52
              B3 7B 03 65 45 65 53 65 45 65 46 65 25 65 54 A7 5D 7A 61 03 1B 3A
              16 01 92 06 5E 65 50 65 55 F2 65 52 B3 7B 03 65 45 65 53 65 25 65
              56 B3 65 4B 65 57 65 58 65 25 65 59 E2 65 45 65 46 04 11 5D 7A 03
              5A 5D 7A 7B 03 7B 04 7B 01 33 02 23 5D 5D 14 7B 03 61 04 19 08)
       (:|ANCHORED| 1.
        (|COMMON-LISP|::|LAMBDA|
         (|COMMON-LISP|::|&REST| |SLIME-NREGEX|::|ARGS|)
         (|COMMON-LISP|::|DECLARE|
          (|COMMON-LISP|::|IGNORE| |SLIME-NREGEX|::|ARGS|))
         |COMMON-LISP|::|T|)
        0. #\^ 2. ".*" |SLIME-NREGEX|::|*REGEX-SPECIAL-CHARS*|
        |COMMON-LISP|::|IF| |COMMON-LISP|::|NOT| |COMMON-LISP|::|DOTIMES|
        (|SLIME-NREGEX|::|I| |COMMON-LISP|::|LENGTH| |COMMON-LISP|::|NIL|)
        |COMMON-LISP|::|EQL|
        (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING| |SLIME-NREGEX|::|I|)
        ((|COMMON-LISP|::|RETURN|
          (|COMMON-LISP|::|SETF| |SLIME-NREGEX|::|START| |SLIME-NREGEX|::|I|)))
        ((|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|FINAL-RETURN|
          |COMMON-LISP|::|NIL|))
        ((|COMMON-LISP|::|SETF|
          (|COMMON-LISP|::|AREF| |SLIME-NREGEX|::|*REGEX-GROUPS*| 0.)
          (|COMMON-LISP|::|LIST| |SLIME-NREGEX|::|INDEX|
           |COMMON-LISP|::|NIL|)))
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (#\\ . 392.) (#\[ . 121.) (#\) . 74.) (#\( . 39.) (#\? . 34.)
           (#\+ . 29.) (#\* . 24.) (#\$ . 10.) (#\. . 2.))
        ((|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|>=| |SLIME-NREGEX|::|INDEX| |COMMON-LISP|::|LENGTH|)
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|)
          (|COMMON-LISP|::|INCF| |SLIME-NREGEX|::|INDEX|)))
        ((|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|NOT|
           (|COMMON-LISP|::|=| |SLIME-NREGEX|::|INDEX|
            |COMMON-LISP|::|LENGTH|))
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|)))
        ((|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|NOT|
           (|COMMON-LISP|::|AND|
            (|COMMON-LISP|::|<| |SLIME-NREGEX|::|INDEX|
             |COMMON-LISP|::|LENGTH|)
            (|COMMON-LISP|::|EQL|
             (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING|
              |SLIME-NREGEX|::|INDEX|)
             #\$)))
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|)
          (|COMMON-LISP|::|INCF| |SLIME-NREGEX|::|INDEX|)))
        (|SLIME-NREGEX|::|ASTRISK|) (|SLIME-NREGEX|::|PLUS|)
        (|SLIME-NREGEX|::|QUESTION|) |COMMON-LISP|::|SETF|
        |COMMON-LISP|::|AREF| |SLIME-NREGEX|::|*REGEX-GROUPS*|
        ((|COMMON-LISP|::|LIST| |SLIME-NREGEX|::|INDEX| |COMMON-LISP|::|NIL|))
        |COMMON-LISP|::|CADR| (|SLIME-NREGEX|::|INDEX|) 256.
        |COMMON-LISP|::|BIT| #\] #\-
        "Invalid range \"~A-~A\".  Ranges must be in acending order" #\\
        |SLIME-NREGEX|::|REGEX-QUOTED| |COMMON-LISP|::|LET|
        |SLIME-NREGEX|::|RANGE|
        ((|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|>=| |SLIME-NREGEX|::|INDEX| |COMMON-LISP|::|LENGTH|)
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|))
         (|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|=| 1.
           (|COMMON-LISP|::|SBIT| |SLIME-NREGEX|::|RANGE|
            (|COMMON-LISP|::|CHAR-CODE|
             (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING|
              |SLIME-NREGEX|::|INDEX|))))
          (|COMMON-LISP|::|INCF| |SLIME-NREGEX|::|INDEX|)
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|)))
        |COMMON-LISP|::|AND|
        (|COMMON-LISP|::|<| |SLIME-NREGEX|::|INDEX| |COMMON-LISP|::|LENGTH|)
        (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING| |SLIME-NREGEX|::|INDEX|)
        ((|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
          |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|INCF| |SLIME-NREGEX|::|INDEX|))
        ((|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|>=| |SLIME-NREGEX|::|INDEX| |COMMON-LISP|::|LENGTH|)
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|))
         (|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|=| 1.
           (|COMMON-LISP|::|SBIT| |SLIME-NREGEX|::|RANGE|
            (|COMMON-LISP|::|CHAR-CODE|
             (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING|
              |SLIME-NREGEX|::|INDEX|))))
          (|COMMON-LISP|::|INCF| |SLIME-NREGEX|::|INDEX|)
          (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
           |COMMON-LISP|::|NIL|)))
        "" |COMMON-LISP|::|STRING|
        (|COMMON-LISP|::|<| |SLIME-NREGEX|::|INDEX| |COMMON-LISP|::|LENGTH|)
        (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING| |SLIME-NREGEX|::|INDEX|)
        ((|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
          |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|INCF| |SLIME-NREGEX|::|INDEX|))
        #\* #\+ #\? |COMMON-LISP|::|<| |COMMON-LISP|::|LENGTH|
        |COMMON-LISP|::|+| |SLIME-NREGEX|::|INDEX|
        ((|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
          |COMMON-LISP|::|NIL|))
        |COMMON-LISP|::|STRING=| :|START1| :|END1|
        (|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|COMPARE|
         |COMMON-LISP|::|NIL|)
        |COMMON-LISP|::|INCF|
        ((|COMMON-LISP|::|SETF|
          (|COMMON-LISP|::|CADR|
           (|COMMON-LISP|::|AREF| |SLIME-NREGEX|::|*REGEX-GROUPS*| 0.))
          |SLIME-NREGEX|::|INDEX|))
        ((|COMMON-LISP|::|RETURN-FROM| |SLIME-NREGEX|::|FINAL-RETURN|
          |COMMON-LISP|::|T|))
        |SLIME-NREGEX|::|PLUS| "GROUP repeat hasn't been implemented yet~%"
        |SLIME-NREGEX|::|QUESTION| |COMMON-LISP|::|PROGN|
        |COMMON-LISP|::|BLOCK| |SLIME-NREGEX|::|COMPARE| (|COMMON-LISP|::|T|)
        "Optional groups not implemented yet~%" |SLIME-NREGEX|::|ASTRISK|
        ((|SLIME-NREGEX|::|OINDEX| |SLIME-NREGEX|::|INDEX|))
        |COMMON-LISP|::|DO| (|COMMON-LISP|::|NIL|)
        ((|SLIME-NREGEX|::|START| |SLIME-NREGEX|::|INDEX|
          (|COMMON-LISP|::|1-| |SLIME-NREGEX|::|START|)))
        ((|COMMON-LISP|::|<| |SLIME-NREGEX|::|START| |SLIME-NREGEX|::|OINDEX|)
         |COMMON-LISP|::|NIL|)
        ((|SLIME-NREGEX|::|INDEX| |SLIME-NREGEX|::|START|))
        |COMMON-LISP|::|LAMBDA|
        (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
         (|SLIME-NREGEX|::|START| 0.)
         (|SLIME-NREGEX|::|END|
          (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|STRING|)))
        |SLIME-NREGEX|::|*REGEX-GROUPINGS*| |SLIME-NREGEX|::|FINAL-RETURN|
        ((|SLIME-NREGEX|::|INDEX| |SLIME-NREGEX|::|START|)
         (|COMMON-LISP|::|LENGTH| |SLIME-NREGEX|::|END|))
        (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
         (|SLIME-NREGEX|::|START| 0.)
         (|SLIME-NREGEX|::|END|
          (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|STRING|)))
        ((|COMMON-LISP|::|LENGTH| |SLIME-NREGEX|::|END|))
        ((|SLIME-NREGEX|::|MARKER| |SLIME-NREGEX|::|START|
          (|COMMON-LISP|::|1+| |SLIME-NREGEX|::|MARKER|)))
        ((|COMMON-LISP|::|>| |SLIME-NREGEX|::|MARKER| |SLIME-NREGEX|::|END|)
         |COMMON-LISP|::|NIL|)
        ((|SLIME-NREGEX|::|INDEX| |SLIME-NREGEX|::|MARKER|))
        ((|COMMON-LISP|::|RETURN| |COMMON-LISP|::|T|)))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SLIME-NREGEX|::|SOURCE| |COMMON-LISP|::|&KEY|
        (|SLIME-NREGEX|::|ANCHORED| |COMMON-LISP|::|NIL|))
       "Usage: (regex-compile <expression> [ :anchored (t/nil) ])\n
       This function take a regular expression (supplied as source) and\n
       compiles this into a lambda list that a string argument can then\n
       be applied to.  It is also possible to compile this lambda list\n
       for better performance or to save it as a named function for later\n
       use"
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
